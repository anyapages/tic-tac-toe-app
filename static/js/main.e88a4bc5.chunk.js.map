{"version":3,"sources":["index.js"],"names":["Board","React","useState","player","setPlayer","gameState","setGameState","status","checkForWinner","playerTurn","console","log","takeTurn","id","renderSquare","i","Square","className","setFilled","tik","setTik","onClick","Game","win","length","p0","filter","item","map","px","win0","isSuperset","Set","winX","set","subset","elem","has","ReactDOM","render","document","getElementById","rootElement"],"mappings":"4NAIMA,EAAQ,WAGZ,MAA4BC,IAAMC,SAAS,GAA3C,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAkCH,IAAMC,SAAS,IAAjD,mBAAOG,EAAP,KAAkBC,EAAlB,KACIC,EAAM,wBAAoBC,EAAeH,IAGzCI,EAAU,iBAAuB,KAAVN,EAAgB,eAAO,UAApC,YAEdO,QAAQC,IAAR,iCAAsCJ,IAEtC,IAAMK,EAAW,SAACC,GAGhB,OAFAP,EAAa,GAAD,mBAAKD,GAAL,CAAgB,CAAEQ,GAAIA,EAAIV,OAAQA,MAC9CC,GAAWD,EAAS,GAAK,GAClBA,GAET,SAASW,EAAaC,GAEpB,OAAO,cAACC,EAAD,CAAQJ,SAAUA,EAAUC,GAAIE,IAGzC,OACE,sBAAKE,UAAU,aAAf,UACE,sBAAKA,UAAU,aAAf,UACGH,EAAa,GACbA,EAAa,GACbA,EAAa,MAEhB,sBAAKG,UAAU,aAAf,UACGH,EAAa,GACbA,EAAa,GACbA,EAAa,MAEhB,sBAAKG,UAAU,aAAf,UACGH,EAAa,GACbA,EAAa,GACbA,EAAa,MAEhB,sBAAKD,GAAG,OAAR,UACE,oBAAIA,GAAG,OAAP,SAAeJ,IACf,6BAAKF,WAMPS,EAAS,SAAC,GAAsB,IAApBJ,EAAmB,EAAnBA,SAAUC,EAAS,EAATA,GAM1B,EAA4BZ,IAAMC,UAAS,GAA3C,mBAAegB,GAAf,WACA,EAAsBjB,IAAMC,SAAS,GAArC,mBAAOiB,EAAP,KAAYC,EAAZ,KAEA,OACE,wBAEEH,UAAkB,KAAPE,EAAa,MAAQ,QAChCE,QAAS,WACPD,EAAOR,EAASC,IAChBK,GAAU,GACVR,QAAQC,IAAR,kBAAuBE,EAAvB,+BAAgDM,KANpD,SASE,6BAlBS,CAAC,IAAK,SAAK,UAkBVA,QAKVG,EAAO,WACX,OACE,qBAAKL,UAAU,OAAf,SACE,cAACjB,EAAD,OAUAuB,EAAM,CAEV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GAEP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GAEP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAOHf,EAAiB,SAACH,GAGtB,GAAIA,EAAUmB,OAAS,EAAG,MAAO,gBACjC,IAAIC,EAAKpB,EAAUqB,QAAO,SAACC,GACzB,GAAmB,GAAfA,EAAKxB,OAAa,OAAOwB,KAE/BF,EAAKA,EAAGG,KAAI,SAACD,GAAD,OAAUA,EAAKd,MAC3B,IAAIgB,EAAKxB,EAAUqB,QAAO,SAACC,GACzB,GAAmB,GAAfA,EAAKxB,OAAa,OAAOwB,KAG/B,GADAE,EAAKA,EAAGD,KAAI,SAACD,GAAD,OAAUA,EAAKd,MACjB,MAANY,GAAoB,MAANI,EAChB,IAAIC,EAAOP,EAAIG,QAAO,SAACC,GACrB,OAAOI,EAAW,IAAIC,IAAIP,GAAK,IAAIO,IAAIL,OAErCM,EAAOV,EAAIG,QAAO,SAACC,GACrB,OAAOI,EAAW,IAAIC,IAAIH,GAAK,IAAIG,IAAIL,OAG3C,OAAIG,EAAKN,OAAS,EAAU,wBACnBS,EAAKT,OAAS,EAAU,kBAC1B,iBAGT,SAASO,EAAWG,EAAKC,GAAS,IAAD,gBACdA,GADc,IAC/B,2BAAyB,CAAC,IAAjBC,EAAgB,QACvB,IAAKF,EAAIG,IAAID,GACX,OAAO,GAHoB,8BAM/B,OAAO,EAKTE,IAASC,OAAO,cAACjB,EAAD,IAAUkB,SAASC,eAAe,SAGlD,IAAMC,EAAcF,SAASC,eAAe,QAC5CH,IAASC,OAAO,cAACvC,EAAD,IAAW0C,K","file":"static/js/main.e88a4bc5.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nconst Board = () => {\n  // 1st player is X ie 1\n  // State keeps track of next player and gameState\n  const [player, setPlayer] = React.useState(1);\n  const [gameState, setGameState] = React.useState([]);\n  let status = `The winner is ${checkForWinner(gameState)}`;\n\n  // Use conditional logic to set a variable to either 'Player O' or  'Player X'\n  let playerTurn = `Player ${player == \"0\" ? \"⭕️\" : \" ❌\"} 's turn`;\n\n  console.log(`Yay, we have a winner: ${status}`);\n\n  const takeTurn = (id) => {\n    setGameState([...gameState, { id: id, player: player }]);\n    setPlayer((player + 1) % 2); // get next player\n    return player;\n  };\n  function renderSquare(i) {\n    // use properties to pass callback function takeTurn to Child\n    return <Square takeTurn={takeTurn} id={i}></Square>;\n  }\n\n  return (\n    <div className=\"game-board\">\n      <div className=\"game-table\">\n        {renderSquare(0)}\n        {renderSquare(1)}\n        {renderSquare(2)}\n      </div>\n      <div className=\"game-table\">\n        {renderSquare(3)}\n        {renderSquare(4)}\n        {renderSquare(5)}\n      </div>\n      <div className=\"game-table\">\n        {renderSquare(6)}\n        {renderSquare(7)}\n        {renderSquare(8)}\n      </div>\n      <div id=\"info\">\n        <h1 id=\"turn\">{playerTurn}</h1>\n        <h1>{status}</h1>\n      </div>\n    </div>\n  );\n};\n\nconst Square = ({ takeTurn, id }) => {\n  const mark = [\"O\", \"✘\", \"♡\"];\n  // id is the square's number\n  // filled tells you if square has been filled\n  // tik tells you symbol in square (same as player)\n  // You call takeTurn to tell Parent that the square has been filled\n  const [filled, setFilled] = React.useState(false);\n  const [tik, setTik] = React.useState(2);\n\n  return (\n    <button\n      // update the return statement to add css classes\n      className={tik == \"1\" ? \"red\" : \"green\"}\n      onClick={() => {\n        setTik(takeTurn(id));\n        setFilled(true);\n        console.log(`Square: ${id} filled by player : ${tik}`);\n      }}\n    >\n      <h1>{mark[tik]}</h1>\n    </button>\n  );\n};\n\nconst Game = () => {\n  return (\n    <div className=\"game\">\n      <Board></Board>\n    </div>\n  );\n};\n\n// Checking for Winner takes a bit of work\n// Use JavaScript Sets to check players choices\n// against winning combinations\n// Online there is more compact version but I prefer this one :)\n\nconst win = [\n  // rows\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  // cols\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  // diagonal\n  [0, 4, 8],\n  [2, 4, 6]\n];\n\nconst checkPlayerTurn = (gameState) => {\n  return gameState.player;\n};\n\nconst checkForWinner = (gameState) => {\n  // get array of box id's\n  // can't be a winner in less than 5 turns\n  if (gameState.length < 5) return \"No Winner Yet\";\n  let p0 = gameState.filter((item) => {\n    if (item.player == 0) return item;\n  });\n  p0 = p0.map((item) => item.id);\n  let px = gameState.filter((item) => {\n    if (item.player == 1) return item;\n  });\n  px = px.map((item) => item.id);\n  if (p0 != null && px != null) {\n    var win0 = win.filter((item) => {\n      return isSuperset(new Set(p0), new Set(item));\n    });\n    var winX = win.filter((item) => {\n      return isSuperset(new Set(px), new Set(item));\n    });\n  }\n  if (win0.length > 0) return \" Player ⭕️ \";\n  else if (winX.length > 0) return \" Player ❌ \";\n  return \"No Winner Yet\";\n};\n// check if subset is in the set\nfunction isSuperset(set, subset) {\n  for (let elem of subset) {\n    if (!set.has(elem)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<Board />, rootElement);\n\n"],"sourceRoot":""}